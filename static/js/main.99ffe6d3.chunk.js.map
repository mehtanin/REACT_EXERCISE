{"version":3,"sources":["components/tableComponent.jsx","components/chartComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","state","items","isLoaded","fetch","corsAnywhereProxy","headers","then","res","json","data","setState","formatTableData","this","columns","Header","accessor","id","filterMethod","filter","row","String","indexOf","value","className","showFilters","filterable","defaultFilterMethod","toLowerCase","formattedData","i","length","j","genres","substring","k","cast","Component","ChartWrapper","lineChartData","pieChartData","formatLineChartData","formatPieChartData","style","display","maxWidth","margin","width","height","chartType","loader","options","title","hAxis","titleTextStyle","color","slantedText","slantedTextAngle","vAxis","minValue","chartArea","is3D","rootProps","undefined","year","chartData","keys","Object","values","push","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sRAqFeA,G,wDAhFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,UAAU,GAJK,E,gEAOE,IAAD,OAOlBC,MACEC,uFACA,CAAEC,QAPY,CACd,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,kBAM/BC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CAAER,UAAU,EAAMD,MAAO,EAAKU,gBAAgBF,U,+BAGxD,IAAD,EACmBG,KAAKZ,MAAzBE,EADC,EACDA,SAAUD,EADT,EACSA,MAChB,IAAKC,EACH,OAAO,8DAET,IAAMW,EAAU,CACd,CAAEC,OAAQ,QAASC,SAAU,QAASC,GAAI,SAC1C,CACEF,OAAQ,OACRC,SAAU,OACVC,GAAI,OACJC,aAAc,SAACC,EAAQC,GACrB,OAAOC,OAAOD,EAAID,EAAOF,KAAKK,QAAQH,EAAOI,QAAU,IAG3D,CAAER,OAAQ,OAAQC,SAAU,OAAQC,GAAI,QACxC,CAAEF,OAAQ,SAAUC,SAAU,SAAUC,GAAI,WAE9C,OACE,yBAAKO,UAAU,SACb,wHAIA,kBAAC,IAAD,CACEC,aAAa,EACbC,YAAU,EACVC,oBAAqB,SAACR,EAAQC,GAAT,OACnBC,OAAOD,EAAID,EAAOF,KAAKW,cAAcN,QAAQH,EAAOI,QAAU,GAEhET,QAASA,EACTJ,KAAMR,EACNsB,UAAU,2B,sCAKFd,GAEd,IADA,IAAImB,EAAgB,GACXC,EAAI,EAAGA,EAAIpB,EAAKqB,OAAQD,IAAK,CACpC,IAAK,IAAIE,EAAI,EAAGA,EAAItB,EAAKoB,GAAGG,OAAOF,OAAQC,IACzCH,EAAgBA,EAAgBnB,EAAKoB,GAAGG,OAAOD,GAAK,KAEtDtB,EAAKoB,GAAGG,OAASJ,EAAcK,UAAU,EAAGL,EAAcE,OAAS,GACnEF,EAAgB,GAEhB,IAAK,IAAIM,EAAI,EAAGA,EAAIzB,EAAKoB,GAAGM,KAAKL,OAAQI,IACvCN,EAAgBA,EAAgBnB,EAAKoB,GAAGM,KAAKD,GAAK,KAEpDzB,EAAKoB,GAAGM,KAAOP,EAAcK,UAAU,EAAGL,EAAcE,OAAS,GACjEF,EAAgB,GAGlB,OAAOnB,M,GA7ES2B,c,OC8GLC,E,kDA9Gb,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXE,UAAU,EACVoC,cAAe,GACfC,aAAc,IALC,E,gEAQE,IAAD,OAOlBpC,MACEC,uFACA,CAAEC,QAPY,CACd,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,kBAM/BC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OACJ,EAAKC,SAAS,CACZR,UAAU,EACVoC,cAAe,EAAKE,oBAAoB/B,GACxC8B,aAAc,EAAKE,mBAAmBhC,U,+BAIpC,IAAD,EACyCG,KAAKZ,MAA/CE,EADC,EACDA,SAAUoC,EADT,EACSA,cAAeC,EADxB,EACwBA,aAC/B,OAAKrC,EAIH,yBACEqB,UAAU,QACVmB,MAAO,CAAEC,QAAS,OAAQC,SAAU,KAAMC,OAAQ,SAElD,kBAAC,IAAD,CACEC,MAAO,KACPC,OAAQ,QACRC,UAAU,YACVC,OAAQ,8CACRxC,KAAM6B,EACNY,QAAS,CACPC,MAAO,2BACPC,MAAO,CACLD,MAAO,OACPE,eAAgB,CAAEC,MAAO,QACzBC,aAAa,EACbC,iBAAkB,IAEpBC,MAAO,CAAEC,SAAU,GACnBC,UAAW,CAAEb,MAAO,MAAOC,OAAQ,UAGvC,kBAAC,IAAD,CACED,MAAO,QACPC,OAAQ,QACRC,UAAU,WACVC,OAAQ,8CACRxC,KAAM8B,EACNW,QAAS,CACPC,MAAO,4BACPS,MAAM,EACND,UAAW,CAAEb,MAAO,MAAOC,OAAQ,QAErCc,UAAW,CAAE,cAAe,QApCzB,gE,0CAyCSpD,GAElB,IADA,IAAI6B,EAAgB,GACXT,EAAI,EAAGA,EAAIpB,EAAKqB,OAAQD,SACKiC,IAAhCxB,EAAc7B,EAAKoB,GAAGkC,MACxBzB,EAAc7B,EAAKoB,GAAGkC,MAAQ,EAE9BzB,EAAc7B,EAAKoB,GAAGkC,MAAQzB,EAAc7B,EAAKoB,GAAGkC,MAAQ,EAMhE,IAHA,IAAIC,EAAY,CAAC,CAAC,OAAQ,kBACtBC,EAAOC,OAAOD,KAAK3B,GACnB6B,EAASD,OAAOC,OAAO7B,GAClBT,EAAI,EAAGA,EAAIoC,EAAKnC,OAAQD,GAAK,EACpCmC,EAAUI,KAAK,CAACH,EAAKpC,GAAIsC,EAAOtC,KAElC,OAAOmC,I,yCAEUvD,GAEjB,IADA,IAAI8B,EAAe,GACVV,EAAI,EAAGA,EAAIpB,EAAKqB,OAAQD,IAC/B,IAAK,IAAIE,EAAI,EAAGA,EAAItB,EAAKoB,GAAGG,OAAOF,OAAQC,SACD+B,IAApCvB,EAAa9B,EAAKoB,GAAGG,OAAOD,IAC9BQ,EAAa9B,EAAKoB,GAAGG,OAAOD,IAAM,EAElCQ,EAAa9B,EAAKoB,GAAGG,OAAOD,IAAMQ,EAAa9B,EAAKoB,GAAGG,OAAOD,IAAM,EAO1E,IAHA,IAAIiC,EAAY,CAAC,CAAC,SAAU,kBACxBC,EAAOC,OAAOD,KAAK1B,GACnB4B,EAASD,OAAOC,OAAO5B,GAClBV,EAAI,EAAGA,EAAIoC,EAAKnC,OAAQD,GAAK,EACpCmC,EAAUI,KAAK,CAACH,EAAKpC,GAAIsC,EAAOtC,KAElC,OAAOmC,M,GA3GgB5B,aCaZiC,E,uKAVX,OACE,yBAAK9C,UAAU,OACb,wDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANWa,aCQCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99ffe6d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table-6\";\r\nimport \"react-table-6/react-table.css\";\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      isLoaded: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    var corsAnywhereProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Headers\": \"content-type\",\r\n    };\r\n    fetch(\r\n      corsAnywhereProxy + \"https://gitlab.fit.fraunhofer.de/snippets/18/raw\",\r\n      { headers }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({ isLoaded: true, items: this.formatTableData(data) })\r\n      );\r\n  }\r\n  render() {\r\n    var { isLoaded, items } = this.state;\r\n    if (!isLoaded) {\r\n      return <div>Please wait. Loading table...</div>;\r\n    }\r\n    const columns = [\r\n      { Header: \"Title\", accessor: \"title\", id: \"title\" },\r\n      {\r\n        Header: \"Year\",\r\n        accessor: \"year\",\r\n        id: \"year\",\r\n        filterMethod: (filter, row) => {\r\n          return String(row[filter.id]).indexOf(filter.value) >= 0;\r\n        },\r\n      },\r\n      { Header: \"Cast\", accessor: \"cast\", id: \"cast\" },\r\n      { Header: \"Genres\", accessor: \"genres\", id: \"genres\" },\r\n    ];\r\n    return (\r\n      <div className=\"Table\">\r\n        <div>\r\n          *Please type on the filter text box to filter the data by\r\n          corresponding column's value.\r\n        </div>\r\n        <ReactTable\r\n          showFilters={true}\r\n          filterable\r\n          defaultFilterMethod={(filter, row) =>\r\n            String(row[filter.id]).toLowerCase().indexOf(filter.value) >= 0\r\n          }\r\n          columns={columns}\r\n          data={items}\r\n          className=\"-striped -highlight\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  formatTableData(data) {\r\n    var formattedData = \"\";\r\n    for (var i = 0; i < data.length; i++) {\r\n      for (var j = 0; j < data[i].genres.length; j++) {\r\n        formattedData = formattedData + data[i].genres[j] + \", \";\r\n      }\r\n      data[i].genres = formattedData.substring(0, formattedData.length - 2);\r\n      formattedData = \"\";\r\n\r\n      for (var k = 0; k < data[i].cast.length; k++) {\r\n        formattedData = formattedData + data[i].cast[k] + \", \";\r\n      }\r\n      data[i].cast = formattedData.substring(0, formattedData.length - 2);\r\n      formattedData = \"\";\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nclass ChartWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      lineChartData: [],\r\n      pieChartData: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    var corsAnywhereProxy = \"https://cors-anywhere.herokuapp.com/\";\r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Headers\": \"content-type\",\r\n    };\r\n    fetch(\r\n      corsAnywhereProxy + \"https://gitlab.fit.fraunhofer.de/snippets/18/raw\",\r\n      { headers }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) =>\r\n        this.setState({\r\n          isLoaded: true,\r\n          lineChartData: this.formatLineChartData(data),\r\n          pieChartData: this.formatPieChartData(data),\r\n        })\r\n      );\r\n  }\r\n  render() {\r\n    var { isLoaded, lineChartData, pieChartData } = this.state;\r\n    if (!isLoaded) {\r\n      return <div>Please wait. Loading chart...</div>;\r\n    }\r\n    return (\r\n      <div\r\n        className=\"Chart\"\r\n        style={{ display: \"flex\", maxWidth: 1500, margin: \"auto\" }}\r\n      >\r\n        <Chart\r\n          width={1100}\r\n          height={\"350px\"}\r\n          chartType=\"AreaChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={lineChartData}\r\n          options={{\r\n            title: \"Movie Production by Year\",\r\n            hAxis: {\r\n              title: \"Year\",\r\n              titleTextStyle: { color: \"#333\" },\r\n              slantedText: true,\r\n              slantedTextAngle: 50,\r\n            },\r\n            vAxis: { minValue: 0 },\r\n            chartArea: { width: \"80%\", height: \"60%\" },\r\n          }}\r\n        />\r\n        <Chart\r\n          width={\"350px\"}\r\n          height={\"450px\"}\r\n          chartType=\"PieChart\"\r\n          loader={<div>Loading Chart</div>}\r\n          data={pieChartData}\r\n          options={{\r\n            title: \"Movie Genres Distribution\",\r\n            is3D: true,\r\n            chartArea: { width: \"80%\", height: \"70%\" },\r\n          }}\r\n          rootProps={{ \"data-testid\": \"2\" }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  formatLineChartData(data) {\r\n    var lineChartData = {};\r\n    for (var i = 0; i < data.length; i++) {\r\n      if (lineChartData[data[i].year] === undefined) {\r\n        lineChartData[data[i].year] = 1;\r\n      } else {\r\n        lineChartData[data[i].year] = lineChartData[data[i].year] + 1;\r\n      }\r\n    }\r\n    var chartData = [[\"Year\", \"No. of Movies\"]];\r\n    var keys = Object.keys(lineChartData);\r\n    var values = Object.values(lineChartData);\r\n    for (let i = 0; i < keys.length; i += 1) {\r\n      chartData.push([keys[i], values[i]]);\r\n    }\r\n    return chartData;\r\n  }\r\n  formatPieChartData(data) {\r\n    var pieChartData = {};\r\n    for (var i = 0; i < data.length; i++) {\r\n      for (var j = 0; j < data[i].genres.length; j++) {\r\n        if (pieChartData[data[i].genres[j]] === undefined) {\r\n          pieChartData[data[i].genres[j]] = 1;\r\n        } else {\r\n          pieChartData[data[i].genres[j]] = pieChartData[data[i].genres[j]] + 1;\r\n        }\r\n      }\r\n    }\r\n    var chartData = [[\"Genres\", \"No. of Movies\"]];\r\n    var keys = Object.keys(pieChartData);\r\n    var values = Object.values(pieChartData);\r\n    for (let i = 0; i < keys.length; i += 1) {\r\n      chartData.push([keys[i], values[i]]);\r\n    }\r\n    return chartData;\r\n  }\r\n}\r\n\r\nexport default ChartWrapper;\r\n","import React, { Component } from \"react\";\nimport Table from \"./components/tableComponent\";\nimport ChartWrapper from \"./components/chartComponent\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h4>Movie Dataset Visualizer</h4>\n        <ChartWrapper />\n        <Table />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}